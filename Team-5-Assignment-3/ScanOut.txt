Token
=> PROGRAM : PROGRAM
=> IDENTIFIER : test
=> SEMICOLON : ;
=> BEGIN : BEGIN
=> IDENTIFIER : i
=> ASSIGN : :=
=> INTEGER : 1
=> SEMICOLON : ;
=> IDENTIFIER : j
=> ASSIGN : :=
=> INTEGER : 2
=> SEMICOLON : ;
=> IF : if
=> IDENTIFIER : i
=> EQUAL : =
=> IDENTIFIER : j
=> THEN : then
=> WRITELN : writeln
=> LPAREN : (
=> STRING : 'Equal'
=> RPAREN : )
=> ELSE : else
=> WRITELN : writeln
=> LPAREN : (
=> STRING : 'Not Equal'
=> RPAREN : )
=> SEMICOLON : ;
=> FOR : for
=> IDENTIFIER : count
=> ASSIGN : :=
=> INTEGER : 1
=> TO : to
=> INTEGER : 10
=> DO : do
=> BEGIN : begin
=> IDENTIFIER : i
=> ASSIGN : :=
=> IDENTIFIER : count
=> PLUSOP : +
=> INTEGER : 1
=> SEMICOLON : ;
=> IDENTIFIER : j
=> ASSIGN : :=
=> IDENTIFIER : i
=> SEMICOLON : ;
=> END : end
=> SEMICOLON : ;
=> WHILE : while
=> IDENTIFIER : i
=> LT : <
=> INTEGER : 10
=> DO : do
=> BEGIN : begin
=> WRITE : write
=> LPAREN : (
=> IDENTIFIER : i
=> COLON : :
=> INTEGER : 1
=> COLON : :
=> INTEGER : 0
=> RPAREN : )
=> SEMICOLON : ;
=> IDENTIFIER : i
=> ASSIGN : :=
=> IDENTIFIER : i
=> PLUSOP : +
=> INTEGER : 1
=> END : end
=> SEMICOLON : ;
=> REPEAT : repeat
=> IDENTIFIER : j
=> PLUSEQUAL : +=
=> IDENTIFIER : j
=> DIVOP : /
=> INTEGER : 2
=> SEMICOLON : ;
=> IDENTIFIER : i
=> DIVEQUAL : /=
=> LPAREN : (
=> IDENTIFIER : j
=> PLUSOP : +
=> INTEGER : 10
=> RPAREN : )
=> MULTOP : *
=> INTEGER : 20
=> SEMICOLON : ;
=> WRITELN : writeln
=> LPAREN : (
=> IDENTIFIER : j
=> RPAREN : )
=> SEMICOLON : ;
=> UNTIL : until
=> IDENTIFIER : j
=> EQUAL : =
=> INTEGER : 1
=> SEMICOLON : ;
=> CASE : case
=> IDENTIFIER : i
=> PLUSOP : +
=> INTEGER : 1
=> OF : of
=> INTEGER : 1
=> COMMA : ,
=> INTEGER : 2
=> COMMA : ,
=> INTEGER : 3
=> COLON : :
=> IDENTIFIER : j
=> ASSIGN : :=
=> IDENTIFIER : j
=> PLUSOP : +
=> INTEGER : 1
=> SEMICOLON : ;
=> INTEGER : 4
=> COMMA : ,
=> INTEGER : 5
=> COLON : :
=> IDENTIFIER : j
=> ASSIGN : :=
=> IDENTIFIER : j
=> PLUSOP : +
=> INTEGER : 2
=> SEMICOLON : ;
=> END : end
=> END : END
=> PERIOD : .
