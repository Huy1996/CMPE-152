Parse Tree

Parse tree (Lisp format):
(program (program_header program (program_name TestFor) ;) (program_body (program_declaration (variable_section var (var_declaration (var_list (var_name i) , (var_name j)) : (data_type (type_name integer)) ; (var_list (var_name ch)) : (data_type (type_name char)))) ;) (compound_statement begin (statement_list (statement (for_statement for (assign_statement (lhs (variable i)) := (rhs (expression (single_expression (term_expression (factor (number (unsign_number 1)))))))) to (expression (single_expression (term_expression (factor (number (unsign_number 5)))))) do (statement (writeln_statement writeln (write_argument_list ( (write_argument (expression (single_expression (term_expression (factor (string_constant 'i = ')))))) , (write_argument (expression (single_expression (term_expression (factor (variable i)))))) )))))) ; (statement (writeln_statement writeln)) ; (statement (for_statement for (assign_statement (lhs (variable i)) := (rhs (expression (single_expression (term_expression (factor (number (unsign_number 1)))))))) to (expression (single_expression (term_expression (factor (number (unsign_number 3)))))) do (statement (compound_statement begin (statement_list (statement (for_statement for (assign_statement (lhs (variable j)) := (rhs (expression (single_expression (term_expression (factor (number (unsign_number 4)))))))) downto (expression (single_expression (term_expression (factor (number (unsign_number 1)))))) do (statement (compound_statement begin (statement_list (statement (writeln_statement writeln (write_argument_list ( (write_argument (expression (single_expression (term_expression (factor (string_constant 'i = ')))))) , (write_argument (expression (single_expression (term_expression (factor (variable i)))))) , (write_argument (expression (single_expression (term_expression (factor (string_constant ', j = ')))))) , (write_argument (expression (single_expression (term_expression (factor (variable j)))))) )))) ; (statement empty_statement)) END))))) end)))) ; (statement (writeln_statement writeln)) ; (statement (for_statement for (assign_statement (lhs (variable ch)) := (rhs (expression (single_expression (term_expression (factor (char_constant 'a'))))))) to (expression (single_expression (term_expression (factor (char_constant 'z'))))) do (statement (write_statement write (write_argument_list ( (write_argument (expression (single_expression (term_expression (factor (variable ch)))))) )))))) ; (statement (writeln_statement writeln)) ; (statement (for_statement for (assign_statement (lhs (variable ch)) := (rhs (expression (single_expression (term_expression (factor (char_constant 'Z'))))))) DOWNto (expression (single_expression (term_expression (factor (char_constant 'A'))))) do (statement (write_statement write (write_argument_list ( (write_argument (expression (single_expression (term_expression (factor (variable ch)))))) )))))) ; (statement (writeln_statement writeln)) ; (statement empty_statement)) end)) . <EOF>)
